function loadExample(params) {
    loadExampleFloorPlan(params[0] + params[1]);
    loadExampleConversationFile(params[0] + params[2]);
    loadExampleMovementFile(params[0] + params[3]);
    processVideo(params[4], params[5]);
}

function loadExampleFloorPlan(folder, filename) {
    loadImage(folder + filename, img => {
        processFloorPlan(img);
    });
}

function loadExampleConversationFile(folder, filename) {
    let requestConversationFile = new Request(params[0] + params[2]);
    fetch(requestConversationFile).then(function (response) {
        return response.arrayBuffer();
    }).then(function (buffer) {
        conversationFileResults = new File([buffer], params[2], {
            type: "text/csv",
        });
        parseExampleConversationFile(conversationFileResults);
    }).catch(function (error) {
        print("Error loading example conversation file");
    });
}

function loadExampleMovementFile(folder, files) {
    // create an initial immediately resolving promise, and then chain new promises as the previous ones resolve:
    // see https://stackoverflow.com/questions/40328932/javascript-es6-promise-for-loop
    for (let i = 0, p = Promise.resolve(); i < files.length; i++) {
        p = p.then(_ => new Promise(resolve =>
            setTimeout(function () {
                let myRequest = new Request(folder + files[i]);
                fetch(myRequest).then(function (response) {
                    return response.arrayBuffer();
                }).then(function (buffer) {
                    return new File([buffer], files[i], {
                        type: "text/csv",
                    })
                }).then(function (file) {
                    movementFiles.push(file);
                    parseExampleMovementFile(file);
                }).catch(function (error) {
                    // print("Error loading example movement file");
                });
                resolve();
            })));
    }
}

 // for (let i = 0; i < params[3].length; i++) { // loop through all files in directory
  //   let myRequest = new Request(params[0] + params[3][i]);
  //   fetch(myRequest).then(function (response) {
  //     return response.arrayBuffer();
  //   }).then(function (buffer) {
  //     return new File([buffer], params[3][i], {
  //       type: "text/csv",
  //     })
  //   }).then(function (file) {
  //     movementFiles.push(file);
  //     parseExampleMovementFile(file);
  //   }).catch(function (error) {
  //     print("Error loading example movement file");
  //   });
  // }